{"version":3,"sources":["components/NavBar.js","components/Footer.js","components/Wrapper.js","components/CharacterPics/index.js","components/Jumbotron.js","App.js","serviceWorker.js","index.js"],"names":["NavBar","props","react_default","a","createElement","className","href","score","highScore","Footer","target","Wrapper","children","CharacterPics","src","picture","clicked","onClick","handleClick","id","alt","name","Jumbotron","App","state","images","displayImages","components_Wrapper","_this","map","image","components_CharacterPics","key","sort","Math","random","console","log","concat","imagesClone","newScore","setState","i","length","alert","components_NavBar","this","components_Jumbotron","components_Footer","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b77c309a.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nfunction NavBar(props) {\r\n  return (\r\n    <nav className=\"shadow-sm navbar navbar-expand-lg navbar-dark bg-dark fixed-top shadow\">\r\n      <a className=\"navbar-brand\" href=\"/\">Clicky Game!</a>\r\n      <ul className=\"navbar-nav\">\r\n        <li className=\"nav-item nav-link\">\r\n          Click an image to start!\r\n              </li>\r\n        <li className=\"nav-item\">\r\n          <span className=\"nav-link\">Score: {props.score} | High score: {props.highScore}</span>\r\n        </li>\r\n      </ul>\r\n    </nav>\r\n  )\r\n}\r\nexport default NavBar;","import React from \"react\";\r\n\r\nfunction Footer() {\r\n  return (\r\n    <footer className=\"page-footer font-small\">\r\n      <div className=\"footer-copyright text-center py-3\">\r\n        <span className=\"text-muted\">Clicky Game! | Copyright &copy; Tina Li 2019 | \r\n          <a href=\"https://github.com/tinali91/mongoose-scraper\" target=\"blank\">GitHub Repository</a> | \r\n          <a href=\"https://tinali91.github.io/updatedPortfolio/\" target=\"blank\">Portfolio</a>\r\n        </span>\r\n      </div>\r\n    </footer>\r\n\r\n  )\r\n}\r\n\r\nexport default Footer;","import React from \"react\";\r\n\r\nfunction Wrapper(props) {\r\n  return (\r\n    <div className=\"row\">\r\n     <div className=\"col-1\"></div>\r\n      <div className=\"col-10\">\r\n        <div className=\"wrapper\">{props.children}</div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Wrapper;\r\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction CharacterPics(props) {\n  return (\n    <div className=\"card\">\n      <img className=\"card-img-top\" src={props.picture} clicked={props.clicked} onClick={()=> props.handleClick(props.id)} alt={props.name} />\n    </div>\n  );\n}\n\nexport default CharacterPics;\n","import React from \"react\";\r\n\r\nconst Jumbotron = () => {\r\n  return (\r\n    <div className=\"jumbotron jumbotron-fluid text-center\">\r\n      <div className=\"container\">\r\n        <h1 className=\"display-3 text-white\">Clicky game!</h1>\r\n        <p className=\"lead text-white\">Click on an image to get points. Click on an image twice and you'll have to start over! Try to get a high score.</p>\r\n      </div>\r\n    </div>\r\n  )\r\n};\r\n\r\nexport default Jumbotron;","import React, { Component } from 'react';\nimport NavBar from \"./components/NavBar\";\nimport images from \"./characters.json\";\nimport Footer from \"./components/Footer\";\nimport Wrapper from \"./components/Wrapper\";\nimport CharacterPics from \"./components/CharacterPics\";\nimport Jumbotron from \"./components/Jumbotron\";\nimport './App.css';\n\nclass App extends Component {\n  state = {\n    images,\n    score: 0,\n    highScore: 0,\n  }\n\n  displayImages = () => {\n    return (\n      <Wrapper>\n        {this.state.images.map(image => (\n          <CharacterPics\n            alt={image.name}\n            picture={image.picture}\n            handleClick={this.handleClick}\n            id={image.id}\n            key={image.id}\n            clicked={image.clicked}\n          />\n        )).sort(() => Math.random() - 0.5 )}\n      </Wrapper>\n    )\n  }\n\n  handleClick = (id) => {\n    console.log(`This card's id is ${id}`)\n\n    let imagesClone = this.state.images;\n\n    if (imagesClone[id].clicked === false) {\n      console.log(`This hasn't been clicked yet`);\n      imagesClone[id].clicked = true;\n      let newScore = this.state.score + 1;\n      this.setState({ score: newScore, highScore: newScore, images: imagesClone })\n    } else if (imagesClone[id].clicked === true) {\n      console.log(`This has been clicked`)\n      for (var i = 0; i < imagesClone.length; i++) {\n        imagesClone[i].clicked = false;\n      }\n      alert(`Sorry! You've already clicked that image.`)\n      this.setState({ score: 0, images: imagesClone })\n    } else if (this.state.score === 12 ) {\n      alert(`Congrats! You've reached the max score!`)\n    }\n    this.displayImages()\n  }\n\n  render() {\n    return (\n      <div>\n        <NavBar score={this.state.score} highScore={this.state.highScore} />\n        <Jumbotron />\n        {this.displayImages()}\n        <Footer />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}